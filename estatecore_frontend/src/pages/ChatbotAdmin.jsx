/**\n * Chatbot Admin Dashboard for EstateCore\n * \n * Comprehensive admin interface for managing the AI chatbot system including\n * conversation monitoring, analytics, model training, and escalation management.\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport {\n    MessageSquare,\n    BarChart3,\n    Settings,\n    Users,\n    AlertTriangle,\n    TrendingUp,\n    Clock,\n    CheckCircle,\n    XCircle,\n    RefreshCw,\n    Download,\n    Upload,\n    Brain,\n    Zap,\n    Eye,\n    MessageCircle,\n    UserCheck,\n    Activity\n} from 'lucide-react';\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n    ArcElement\n} from 'chart.js';\n\n// Register Chart.js components\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n    ArcElement\n);\n\n// Sub-components\nimport ConversationList from '../components/chatbot/admin/ConversationList';\nimport EscalationQueue from '../components/chatbot/admin/EscalationQueue';\nimport ModelTraining from '../components/chatbot/admin/ModelTraining';\nimport ChatbotSettings from '../components/chatbot/admin/ChatbotSettings';\nimport ConversationViewer from '../components/chatbot/admin/ConversationViewer';\n\nconst ChatbotAdmin = () => {\n    // State management\n    const [activeTab, setActiveTab] = useState('overview');\n    const [analytics, setAnalytics] = useState(null);\n    const [conversations, setConversations] = useState([]);\n    const [escalations, setEscalations] = useState([]);\n    const [agents, setAgents] = useState([]);\n    const [selectedConversation, setSelectedConversation] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [refreshing, setRefreshing] = useState(false);\n    const [dateRange, setDateRange] = useState('7d');\n    \n    // Load data on component mount\n    useEffect(() => {\n        loadDashboardData();\n        \n        // Set up auto-refresh for real-time data\n        const interval = setInterval(() => {\n            if (activeTab === 'overview' || activeTab === 'escalations') {\n                refreshData();\n            }\n        }, 30000); // 30 seconds\n        \n        return () => clearInterval(interval);\n    }, [activeTab, dateRange]);\n    \n    // Load dashboard data\n    const loadDashboardData = useCallback(async () => {\n        setLoading(true);\n        try {\n            await Promise.all([\n                loadAnalytics(),\n                loadConversations(),\n                loadEscalations(),\n                loadAgents()\n            ]);\n        } catch (error) {\n            console.error('Error loading dashboard data:', error);\n        } finally {\n            setLoading(false);\n        }\n    }, [dateRange]);\n    \n    // Load analytics data\n    const loadAnalytics = async () => {\n        try {\n            const response = await fetch(`/api/chatbot/admin/analytics?days=${dateRange.replace('d', '')}`, {\n                headers: {\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\n                }\n            });\n            const data = await response.json();\n            if (data.success) {\n                setAnalytics(data.analytics);\n            }\n        } catch (error) {\n            console.error('Error loading analytics:', error);\n        }\n    };\n    \n    // Load conversations\n    const loadConversations = async () => {\n        try {\n            const response = await fetch('/api/chatbot/admin/conversations?limit=50', {\n                headers: {\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\n                }\n            });\n            const data = await response.json();\n            if (data.success) {\n                setConversations(data.conversations);\n            }\n        } catch (error) {\n            console.error('Error loading conversations:', error);\n        }\n    };\n    \n    // Load escalations\n    const loadEscalations = async () => {\n        try {\n            const response = await fetch('/api/escalations/queue', {\n                headers: {\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\n                }\n            });\n            const data = await response.json();\n            if (data.success) {\n                setEscalations(data.escalations || []);\n            }\n        } catch (error) {\n            console.error('Error loading escalations:', error);\n        }\n    };\n    \n    // Load agents\n    const loadAgents = async () => {\n        try {\n            const response = await fetch('/api/escalations/agents', {\n                headers: {\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\n                }\n            });\n            const data = await response.json();\n            if (data.success) {\n                setAgents(data.agents || []);\n            }\n        } catch (error) {\n            console.error('Error loading agents:', error);\n        }\n    };\n    \n    // Refresh data\n    const refreshData = async () => {\n        setRefreshing(true);\n        try {\n            if (activeTab === 'overview') {\n                await loadAnalytics();\n            } else if (activeTab === 'escalations') {\n                await loadEscalations();\n            }\n        } finally {\n            setRefreshing(false);\n        }\n    };\n    \n    // Retrain models\n    const handleModelRetrain = async () => {\n        try {\n            const response = await fetch('/api/chatbot/admin/retrain', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\n                }\n            });\n            const data = await response.json();\n            \n            if (data.success) {\n                alert('Model retraining started successfully!');\n            } else {\n                alert('Failed to start model retraining');\n            }\n        } catch (error) {\n            console.error('Error retraining models:', error);\n            alert('Error starting model retraining');\n        }\n    };\n    \n    // Export analytics data\n    const exportAnalytics = () => {\n        if (!analytics) return;\n        \n        const csvContent = [\n            ['Metric', 'Value'],\n            ['Total Conversations', analytics.total_conversations],\n            ['Resolution Rate', `${(analytics.resolution_rate * 100).toFixed(1)}%`],\n            ['Average Resolution Time', `${analytics.average_resolution_time_minutes.toFixed(1)} minutes`],\n            ['SLA Compliance', `${(analytics.sla_compliance_rate * 100).toFixed(1)}%`],\n            ['Pending Escalations', analytics.pending_escalations]\n        ].map(row => row.join(',')).join('\\n');\n        \n        const blob = new Blob([csvContent], { type: 'text/csv' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `chatbot-analytics-${new Date().toISOString().split('T')[0]}.csv`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    };\n    \n    // Tab navigation\n    const tabs = [\n        { id: 'overview', label: 'Overview', icon: BarChart3 },\n        { id: 'conversations', label: 'Conversations', icon: MessageSquare },\n        { id: 'escalations', label: 'Escalations', icon: AlertTriangle },\n        { id: 'agents', label: 'Agents', icon: Users },\n        { id: 'training', label: 'AI Training', icon: Brain },\n        { id: 'settings', label: 'Settings', icon: Settings }\n    ];\n    \n    // Render overview tab\n    const renderOverviewTab = () => {\n        if (!analytics) return <div>Loading analytics...</div>;\n        \n        const chartOptions = {\n            responsive: true,\n            plugins: {\n                legend: {\n                    position: 'top'\n                },\n                title: {\n                    display: true,\n                    text: 'Chatbot Performance Metrics'\n                }\n            }\n        };\n        \n        // Sample chart data (in production, this would come from analytics)\n        const conversationTrendData = {\n            labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n            datasets: [\n                {\n                    label: 'Conversations',\n                    data: [12, 19, 3, 5, 2, 3, 9],\n                    borderColor: 'rgb(59, 130, 246)',\n                    backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                    fill: true\n                }\n            ]\n        };\n        \n        const intentDistributionData = {\n            labels: Object.keys(analytics.escalation_reasons || {}),\n            datasets: [\n                {\n                    data: Object.values(analytics.escalation_reasons || {}),\n                    backgroundColor: [\n                        '#ef4444',\n                        '#f97316',\n                        '#eab308',\n                        '#22c55e',\n                        '#3b82f6',\n                        '#8b5cf6'\n                    ]\n                }\n            ]\n        };\n        \n        return (\n            <div className=\"space-y-6\">\n                {/* Key Metrics */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                    <div className=\"bg-white p-6 rounded-lg shadow border\">\n                        <div className=\"flex items-center justify-between\">\n                            <div>\n                                <p className=\"text-sm text-gray-600\">Total Conversations</p>\n                                <p className=\"text-3xl font-bold text-gray-900\">\n                                    {analytics.total_conversations || 0}\n                                </p>\n                            </div>\n                            <MessageCircle className=\"h-8 w-8 text-blue-600\" />\n                        </div>\n                        <div className=\"mt-2\">\n                            <span className=\"text-sm text-green-600\">+12% from last week</span>\n                        </div>\n                    </div>\n                    \n                    <div className=\"bg-white p-6 rounded-lg shadow border\">\n                        <div className=\"flex items-center justify-between\">\n                            <div>\n                                <p className=\"text-sm text-gray-600\">Resolution Rate</p>\n                                <p className=\"text-3xl font-bold text-gray-900\">\n                                    {((analytics.resolution_rate || 0) * 100).toFixed(1)}%\n                                </p>\n                            </div>\n                            <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                        </div>\n                        <div className=\"mt-2\">\n                            <span className=\"text-sm text-green-600\">+5% from last week</span>\n                        </div>\n                    </div>\n                    \n                    <div className=\"bg-white p-6 rounded-lg shadow border\">\n                        <div className=\"flex items-center justify-between\">\n                            <div>\n                                <p className=\"text-sm text-gray-600\">Avg Resolution Time</p>\n                                <p className=\"text-3xl font-bold text-gray-900\">\n                                    {(analytics.average_resolution_time_minutes || 0).toFixed(0)}m\n                                </p>\n                            </div>\n                            <Clock className=\"h-8 w-8 text-yellow-600\" />\n                        </div>\n                        <div className=\"mt-2\">\n                            <span className=\"text-sm text-red-600\">+2m from last week</span>\n                        </div>\n                    </div>\n                    \n                    <div className=\"bg-white p-6 rounded-lg shadow border\">\n                        <div className=\"flex items-center justify-between\">\n                            <div>\n                                <p className=\"text-sm text-gray-600\">SLA Compliance</p>\n                                <p className=\"text-3xl font-bold text-gray-900\">\n                                    {((analytics.sla_compliance_rate || 0) * 100).toFixed(1)}%\n                                </p>\n                            </div>\n                            <TrendingUp className=\"h-8 w-8 text-green-600\" />\n                        </div>\n                        <div className=\"mt-2\">\n                            <span className=\"text-sm text-green-600\">+3% from last week</span>\n                        </div>\n                    </div>\n                </div>\n                \n                {/* Charts */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    <div className=\"bg-white p-6 rounded-lg shadow border\">\n                        <h3 className=\"text-lg font-semibold mb-4\">Conversation Trend</h3>\n                        <Line data={conversationTrendData} options={chartOptions} />\n                    </div>\n                    \n                    <div className=\"bg-white p-6 rounded-lg shadow border\">\n                        <h3 className=\"text-lg font-semibold mb-4\">Escalation Reasons</h3>\n                        <Doughnut data={intentDistributionData} />\n                    </div>\n                </div>\n                \n                {/* Recent Activity */}\n                <div className=\"bg-white rounded-lg shadow border\">\n                    <div className=\"px-6 py-4 border-b border-gray-200\">\n                        <h3 className=\"text-lg font-semibold\">Recent Activity</h3>\n                    </div>\n                    <div className=\"p-6\">\n                        <div className=\"space-y-4\">\n                            {/* Sample activity items */}\n                            <div className=\"flex items-center space-x-3\">\n                                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                                <span className=\"text-sm text-gray-600\">\n                                    Conversation #1234 resolved automatically\n                                </span>\n                                <span className=\"text-xs text-gray-400\">2 minutes ago</span>\n                            </div>\n                            <div className=\"flex items-center space-x-3\">\n                                <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n                                <span className=\"text-sm text-gray-600\">\n                                    Conversation #1233 escalated to Agent Sarah\n                                </span>\n                                <span className=\"text-xs text-gray-400\">5 minutes ago</span>\n                            </div>\n                            <div className=\"flex items-center space-x-3\">\n                                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                                <span className=\"text-sm text-gray-600\">\n                                    New user started conversation\n                                </span>\n                                <span className=\"text-xs text-gray-400\">8 minutes ago</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n    \n    // Render content based on active tab\n    const renderTabContent = () => {\n        switch (activeTab) {\n            case 'overview':\n                return renderOverviewTab();\n            case 'conversations':\n                return (\n                    <ConversationList\n                        conversations={conversations}\n                        onSelectConversation={setSelectedConversation}\n                    />\n                );\n            case 'escalations':\n                return (\n                    <EscalationQueue\n                        escalations={escalations}\n                        agents={agents}\n                        onRefresh={loadEscalations}\n                    />\n                );\n            case 'agents':\n                return (\n                    <div className=\"bg-white rounded-lg shadow border\">\n                        <div className=\"px-6 py-4 border-b border-gray-200\">\n                            <h3 className=\"text-lg font-semibold\">Agent Management</h3>\n                        </div>\n                        <div className=\"p-6\">\n                            <div className=\"space-y-4\">\n                                {agents.map((agent) => (\n                                    <div key={agent.agent_id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                                        <div className=\"flex items-center space-x-4\">\n                                            <div className={`w-3 h-3 rounded-full ${\n                                                agent.availability_status === 'available' ? 'bg-green-500' :\n                                                agent.availability_status === 'busy' ? 'bg-yellow-500' : 'bg-red-500'\n                                            }`} />\n                                            <div>\n                                                <h4 className=\"font-medium\">{agent.name}</h4>\n                                                <p className=\"text-sm text-gray-600\">{agent.department}</p>\n                                            </div>\n                                        </div>\n                                        <div className=\"text-right\">\n                                            <p className=\"text-sm font-medium\">{agent.current_cases}/{agent.max_concurrent_cases} cases</p>\n                                            <p className=\"text-xs text-gray-500\">{agent.availability_status}</p>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                );\n            case 'training':\n                return <ModelTraining onRetrain={handleModelRetrain} />;\n            case 'settings':\n                return <ChatbotSettings />;\n            default:\n                return <div>Tab not found</div>;\n        }\n    };\n    \n    if (loading) {\n        return (\n            <div className=\"flex items-center justify-center h-64\">\n                <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n            </div>\n        );\n    }\n    \n    return (\n        <div className=\"min-h-screen bg-gray-50\">\n            {/* Header */}\n            <div className=\"bg-white border-b border-gray-200\">\n                <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n                    <div className=\"flex items-center justify-between h-16\">\n                        <div className=\"flex items-center space-x-4\">\n                            <Brain className=\"h-8 w-8 text-blue-600\" />\n                            <h1 className=\"text-2xl font-bold text-gray-900\">Chatbot Admin</h1>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-4\">\n                            {/* Date Range Selector */}\n                            <select\n                                value={dateRange}\n                                onChange={(e) => setDateRange(e.target.value)}\n                                className=\"border border-gray-300 rounded-md px-3 py-1 text-sm\"\n                            >\n                                <option value=\"1d\">Last 24 hours</option>\n                                <option value=\"7d\">Last 7 days</option>\n                                <option value=\"30d\">Last 30 days</option>\n                                <option value=\"90d\">Last 90 days</option>\n                            </select>\n                            \n                            {/* Export Button */}\n                            <button\n                                onClick={exportAnalytics}\n                                className=\"flex items-center space-x-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-md transition-colors\"\n                            >\n                                <Download size={16} />\n                                <span>Export</span>\n                            </button>\n                            \n                            {/* Refresh Button */}\n                            <button\n                                onClick={refreshData}\n                                disabled={refreshing}\n                                className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-md transition-colors\"\n                            >\n                                <RefreshCw size={16} className={refreshing ? 'animate-spin' : ''} />\n                                <span>Refresh</span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            {/* Tab Navigation */}\n            <div className=\"bg-white border-b border-gray-200\">\n                <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n                    <div className=\"flex space-x-8\">\n                        {tabs.map((tab) => {\n                            const Icon = tab.icon;\n                            return (\n                                <button\n                                    key={tab.id}\n                                    onClick={() => setActiveTab(tab.id)}\n                                    className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors ${\n                                        activeTab === tab.id\n                                            ? 'border-blue-500 text-blue-600'\n                                            : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                                    }`}\n                                >\n                                    <Icon size={16} />\n                                    <span>{tab.label}</span>\n                                    \n                                    {/* Badge for escalations */}\n                                    {tab.id === 'escalations' && escalations.length > 0 && (\n                                        <span className=\"bg-red-500 text-white text-xs rounded-full px-2 py-1 ml-2\">\n                                            {escalations.length}\n                                        </span>\n                                    )}\n                                </button>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n            \n            {/* Main Content */}\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n                {renderTabContent()}\n            </div>\n            \n            {/* Conversation Viewer Modal */}\n            {selectedConversation && (\n                <ConversationViewer\n                    conversation={selectedConversation}\n                    onClose={() => setSelectedConversation(null)}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default ChatbotAdmin;"
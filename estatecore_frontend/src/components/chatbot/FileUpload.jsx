/**\n * File Upload Component for EstateCore Chatbot\n * \n * Handles drag and drop file uploads with validation\n */\n\nimport React, { useState, useRef } from 'react';\nimport { Upload, X, FileText, Image, Video, AlertCircle } from 'lucide-react';\n\nconst FileUpload = ({ onFileSelect, maxSize = 10 * 1024 * 1024, acceptedTypes = ['image/*', 'video/*', '.pdf', '.txt', '.doc', '.docx'] }) => {\n    const [isDragOver, setIsDragOver] = useState(false);\n    const [error, setError] = useState(null);\n    const fileInputRef = useRef(null);\n    \n    const validateFile = (file) => {\n        // Check file size\n        if (file.size > maxSize) {\n            return `File too large. Maximum size is ${formatFileSize(maxSize)}.`;\n        }\n        \n        // Check file type\n        const isValidType = acceptedTypes.some(type => {\n            if (type.startsWith('.')) {\n                // Extension check\n                return file.name.toLowerCase().endsWith(type.toLowerCase());\n            } else if (type.includes('*')) {\n                // MIME type pattern check\n                const pattern = type.replace('*', '');\n                return file.type.startsWith(pattern);\n            } else {\n                // Exact MIME type check\n                return file.type === type;\n            }\n        });\n        \n        if (!isValidType) {\n            return 'File type not supported.';\n        }\n        \n        return null;\n    };\n    \n    const handleFileSelect = (file) => {\n        setError(null);\n        \n        const validationError = validateFile(file);\n        if (validationError) {\n            setError(validationError);\n            return;\n        }\n        \n        onFileSelect(file);\n    };\n    \n    const handleDragOver = (e) => {\n        e.preventDefault();\n        setIsDragOver(true);\n    };\n    \n    const handleDragLeave = (e) => {\n        e.preventDefault();\n        setIsDragOver(false);\n    };\n    \n    const handleDrop = (e) => {\n        e.preventDefault();\n        setIsDragOver(false);\n        \n        const files = Array.from(e.dataTransfer.files);\n        if (files.length > 0) {\n            handleFileSelect(files[0]);\n        }\n    };\n    \n    const handleInputChange = (e) => {\n        const files = Array.from(e.target.files);\n        if (files.length > 0) {\n            handleFileSelect(files[0]);\n        }\n    };\n    \n    const formatFileSize = (bytes) => {\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        if (bytes === 0) return '0 Bytes';\n        \n        const i = Math.floor(Math.log(bytes) / Math.log(1024));\n        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    };\n    \n    const getFileIcon = (fileType) => {\n        if (fileType.startsWith('image/')) {\n            return <Image size={24} className=\"text-green-600\" />;\n        } else if (fileType.startsWith('video/')) {\n            return <Video size={24} className=\"text-blue-600\" />;\n        } else {\n            return <FileText size={24} className=\"text-gray-600\" />;\n        }\n    };\n    \n    return (\n        <div className=\"relative\">\n            {/* Drag and Drop Area */}\n            <div\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n                onDrop={handleDrop}\n                onClick={() => fileInputRef.current?.click()}\n                className={`\n                    border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors\n                    ${\n                        isDragOver\n                            ? 'border-blue-500 bg-blue-50'\n                            : 'border-gray-300 hover:border-gray-400'\n                    }\n                    ${\n                        error\n                            ? 'border-red-300 bg-red-50'\n                            : ''\n                    }\n                `}\n            >\n                <Upload className={`mx-auto h-12 w-12 ${\n                    isDragOver ? 'text-blue-500' : error ? 'text-red-400' : 'text-gray-400'\n                }`} />\n                \n                <div className=\"mt-4\">\n                    <p className={`text-sm ${\n                        error ? 'text-red-600' : 'text-gray-600'\n                    }`}>\n                        {error || (\n                            <>\n                                <span className=\"font-medium\">Click to upload</span> or drag and drop\n                            </>\n                        )}\n                    </p>\n                    \n                    {!error && (\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                            Images, videos, PDFs, documents up to {formatFileSize(maxSize)}\n                        </p>\n                    )}\n                </div>\n                \n                {error && (\n                    <div className=\"mt-2 flex items-center justify-center space-x-1\">\n                        <AlertCircle size={14} className=\"text-red-500\" />\n                        <span className=\"text-xs text-red-600\">{error}</span>\n                    </div>\n                )}\n            </div>\n            \n            {/* Hidden File Input */}\n            <input\n                ref={fileInputRef}\n                type=\"file\"\n                onChange={handleInputChange}\n                accept={acceptedTypes.join(',')}\n                className=\"hidden\"\n            />\n        </div>\n    );\n};\n\nexport default FileUpload;"
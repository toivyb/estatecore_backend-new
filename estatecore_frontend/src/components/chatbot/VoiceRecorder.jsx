/**\n * Voice Recorder Component for EstateCore Chatbot\n * \n * Enables voice message recording with Web Audio API\n */\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Mic, MicOff, Square } from 'lucide-react';\n\nconst VoiceRecorder = ({ isRecording, onStart, onEnd }) => {\n    const [mediaRecorder, setMediaRecorder] = useState(null);\n    const [audioChunks, setAudioChunks] = useState([]);\n    const [isSupported, setIsSupported] = useState(true);\n    const [recordingTime, setRecordingTime] = useState(0);\n    const timerRef = useRef(null);\n    \n    useEffect(() => {\n        // Check if MediaRecorder is supported\n        if (!navigator.mediaDevices || !window.MediaRecorder) {\n            setIsSupported(false);\n        }\n    }, []);\n    \n    useEffect(() => {\n        if (isRecording) {\n            startTimer();\n        } else {\n            stopTimer();\n        }\n        \n        return () => stopTimer();\n    }, [isRecording]);\n    \n    const startTimer = () => {\n        setRecordingTime(0);\n        timerRef.current = setInterval(() => {\n            setRecordingTime(prev => prev + 1);\n        }, 1000);\n    };\n    \n    const stopTimer = () => {\n        if (timerRef.current) {\n            clearInterval(timerRef.current);\n            timerRef.current = null;\n        }\n        setRecordingTime(0);\n    };\n    \n    const startRecording = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ \n                audio: {\n                    echoCancellation: true,\n                    noiseSuppression: true,\n                    sampleRate: 44100\n                }\n            });\n            \n            const recorder = new MediaRecorder(stream, {\n                mimeType: 'audio/webm;codecs=opus'\n            });\n            \n            const chunks = [];\n            \n            recorder.ondataavailable = (event) => {\n                if (event.data.size > 0) {\n                    chunks.push(event.data);\n                }\n            };\n            \n            recorder.onstop = () => {\n                const audioBlob = new Blob(chunks, { type: 'audio/webm;codecs=opus' });\n                onEnd(audioBlob);\n                \n                // Stop all audio tracks\n                stream.getTracks().forEach(track => track.stop());\n                \n                // Reset state\n                setAudioChunks([]);\n                setMediaRecorder(null);\n            };\n            \n            recorder.start();\n            setMediaRecorder(recorder);\n            setAudioChunks(chunks);\n            onStart();\n            \n        } catch (error) {\n            console.error('Error starting recording:', error);\n            alert('Could not access microphone. Please check permissions.');\n        }\n    };\n    \n    const stopRecording = () => {\n        if (mediaRecorder && mediaRecorder.state === 'recording') {\n            mediaRecorder.stop();\n        }\n    };\n    \n    const handleClick = () => {\n        if (isRecording) {\n            stopRecording();\n        } else {\n            startRecording();\n        }\n    };\n    \n    const formatTime = (seconds) => {\n        const mins = Math.floor(seconds / 60);\n        const secs = seconds % 60;\n        return `${mins}:${secs.toString().padStart(2, '0')}`;\n    };\n    \n    if (!isSupported) {\n        return null;\n    }\n    \n    return (\n        <div className=\"flex items-center space-x-2\">\n            {isRecording && (\n                <div className=\"text-xs text-red-600 font-mono\">\n                    {formatTime(recordingTime)}\n                </div>\n            )}\n            \n            <button\n                onClick={handleClick}\n                className={`p-2 rounded-lg transition-colors ${\n                    isRecording\n                        ? 'bg-red-100 text-red-600 hover:bg-red-200 animate-pulse'\n                        : 'text-gray-400 hover:text-gray-600'\n                }`}\n                aria-label={isRecording ? 'Stop recording' : 'Start voice recording'}\n                title={isRecording ? 'Stop recording' : 'Record voice message'}\n            >\n                {isRecording ? <Square size={18} /> : <Mic size={18} />}\n            </button>\n        </div>\n    );\n};\n\nexport default VoiceRecorder;"
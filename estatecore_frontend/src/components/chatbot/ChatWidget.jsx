/**
 * EstateCore AI Chatbot Widget
 * 
 * Modern, responsive chat widget for tenant support with real-time messaging,
 * file upload, voice support, and rich message formatting.
 */

import React, { useState, useEffect, useRef, useCallback } from 'react';
import { io } from 'socket.io-client';
import { 
    MessageCircle, 
    Send, 
    Paperclip, 
    Mic, 
    MicOff, 
    X, 
    Minimize2, 
    Maximize2,
    Phone,
    Mail,
    AlertTriangle,
    CheckCircle,
    Info,
    User,
    Bot
} from 'lucide-react';

// Sub-components
import MessageBubble from './MessageBubble';
import QuickReplyButton from './QuickReplyButton';
import TypingIndicator from './TypingIndicator';
import FileUpload from './FileUpload';
import VoiceRecorder from './VoiceRecorder';
import EscalationNotice from './EscalationNotice';

const ChatWidget = () => {
    // State management
    const [isOpen, setIsOpen] = useState(false);
    const [isMinimized, setIsMinimized] = useState(false);
    const [isConnected, setIsConnected] = useState(false);
    const [messages, setMessages] = useState([]);
    const [inputText, setInputText] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const [isBotTyping, setIsBotTyping] = useState(false);
    const [conversationId, setConversationId] = useState(null);
    const [quickReplies, setQuickReplies] = useState([]);
    const [isRecording, setIsRecording] = useState(false);
    const [escalationNotice, setEscalationNotice] = useState(null);
    const [connectionError, setConnectionError] = useState(null);
    const [unreadCount, setUnreadCount] = useState(0);
    
    // Refs
    const socketRef = useRef(null);
    const messagesEndRef = useRef(null);
    const inputRef = useRef(null);
    const typingTimeoutRef = useRef(null);
    const fileInputRef = useRef(null);
    
    // Configuration
    const MAX_MESSAGE_LENGTH = 2000;
    const TYPING_TIMEOUT = 1000;
    
    // Initialize socket connection
    useEffect(() => {
        if (isOpen && !socketRef.current) {
            initializeSocket();
        }
        
        return () => {
            if (socketRef.current) {
                socketRef.current.disconnect();
                socketRef.current = null;
            }
        };
    }, [isOpen]);
    
    // Auto-scroll to bottom when new messages arrive
    useEffect(() => {
        scrollToBottom();
    }, [messages]);
    
    // Initialize WebSocket connection
    const initializeSocket = useCallback(() => {
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                setConnectionError('Authentication required');
                return;
            }
            
            socketRef.current = io('/chatbot', {\n                auth: { token },\n                transports: ['websocket', 'polling']\n            });\n            \n            // Connection events\n            socketRef.current.on('connect', () => {\n                setIsConnected(true);\n                setConnectionError(null);\n                console.log('Connected to chatbot service');\n            });\n            \n            socketRef.current.on('disconnect', () => {\n                setIsConnected(false);\n                console.log('Disconnected from chatbot service');\n            });\n            \n            socketRef.current.on('connect_error', (error) => {\n                setConnectionError('Connection failed');\n                console.error('Connection error:', error);\n            });\n            \n            // Chat events\n            socketRef.current.on('connected', (data) => {\n                console.log('Chatbot connected:', data);\n                startConversation();\n            });\n            \n            socketRef.current.on('message', (messageData) => {\n                handleIncomingMessage(messageData);\n            });\n            \n            socketRef.current.on('typing_indicator', (data) => {\n                if (data.user_id === 'bot') {\n                    setIsBotTyping(data.typing);\n                }\n            });\n            \n            socketRef.current.on('escalation_notice', (data) => {\n                setEscalationNotice(data);\n            });\n            \n            socketRef.current.on('error', (error) => {\n                console.error('Socket error:', error);\n                addSystemMessage('An error occurred. Please try again.', 'error');\n            });\n            \n        } catch (error) {\n            console.error('Error initializing socket:', error);\n            setConnectionError('Failed to connect');\n        }\n    }, []);\n    \n    // Start conversation\n    const startConversation = useCallback(async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await fetch('/api/chatbot/conversation/start', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                }\n            });\n            \n            const data = await response.json();\n            \n            if (data.success) {\n                setConversationId(data.conversation_id);\n                \n                // Join conversation room\n                socketRef.current.emit('join_conversation', {\n                    conversation_id: data.conversation_id\n                });\n                \n                // Add greeting message\n                const greetingMessage = {\n                    id: generateMessageId(),\n                    sender: 'bot',\n                    content: data.greeting,\n                    timestamp: new Date().toISOString(),\n                    response_type: 'text'\n                };\n                \n                setMessages([greetingMessage]);\n                setQuickReplies(data.quick_replies || []);\n            } else {\n                addSystemMessage('Failed to start conversation', 'error');\n            }\n        } catch (error) {\n            console.error('Error starting conversation:', error);\n            addSystemMessage('Failed to connect to support', 'error');\n        }\n    }, []);\n    \n    // Handle incoming messages\n    const handleIncomingMessage = useCallback((messageData) => {\n        const message = {\n            id: messageData.message_id || generateMessageId(),\n            sender: messageData.sender,\n            content: messageData.content,\n            timestamp: messageData.timestamp || new Date().toISOString(),\n            response_type: messageData.response_type || 'text',\n            quick_replies: messageData.quick_replies,\n            data: messageData.data,\n            metadata: messageData.metadata\n        };\n        \n        setMessages(prev => [...prev, message]);\n        \n        // Update quick replies if provided\n        if (messageData.quick_replies) {\n            setQuickReplies(messageData.quick_replies);\n        }\n        \n        // Increment unread count if widget is closed\n        if (!isOpen) {\n            setUnreadCount(prev => prev + 1);\n        }\n        \n        // Handle escalation\n        if (messageData.metadata?.escalated) {\n            setEscalationNotice({\n                message: 'Your conversation has been escalated to a human agent',\n                estimated_wait_time: '10-15 minutes'\n            });\n        }\n    }, [isOpen]);\n    \n    // Send message\n    const sendMessage = useCallback(async (messageText = inputText) => {\n        if (!messageText.trim() || !socketRef.current || !conversationId) return;\n        \n        const messageContent = messageText.trim();\n        \n        if (messageContent.length > MAX_MESSAGE_LENGTH) {\n            addSystemMessage('Message too long. Please keep it under 2000 characters.', 'warning');\n            return;\n        }\n        \n        // Add user message to chat\n        const userMessage = {\n            id: generateMessageId(),\n            sender: 'user',\n            content: messageContent,\n            timestamp: new Date().toISOString(),\n            response_type: 'text'\n        };\n        \n        setMessages(prev => [...prev, userMessage]);\n        setInputText('');\n        setQuickReplies([]);\n        \n        // Stop typing indicator\n        if (typingTimeoutRef.current) {\n            clearTimeout(typingTimeoutRef.current);\n            setIsTyping(false);\n            socketRef.current.emit('typing_stop');\n        }\n        \n        // Send via WebSocket\n        socketRef.current.emit('send_message', {\n            message: messageContent\n        });\n        \n    }, [inputText, conversationId]);\n    \n    // Handle input change with typing indicator\n    const handleInputChange = useCallback((e) => {\n        const value = e.target.value;\n        setInputText(value);\n        \n        if (!socketRef.current) return;\n        \n        // Typing indicator logic\n        if (value && !isTyping) {\n            setIsTyping(true);\n            socketRef.current.emit('typing_start');\n        }\n        \n        // Clear existing timeout\n        if (typingTimeoutRef.current) {\n            clearTimeout(typingTimeoutRef.current);\n        }\n        \n        // Set timeout to stop typing\n        typingTimeoutRef.current = setTimeout(() => {\n            setIsTyping(false);\n            if (socketRef.current) {\n                socketRef.current.emit('typing_stop');\n            }\n        }, TYPING_TIMEOUT);\n    }, [isTyping]);\n    \n    // Handle key press\n    const handleKeyPress = useCallback((e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            sendMessage();\n        }\n    }, [sendMessage]);\n    \n    // Handle quick reply click\n    const handleQuickReply = useCallback((reply) => {\n        sendMessage(reply);\n    }, [sendMessage]);\n    \n    // File upload handler\n    const handleFileUpload = useCallback(async (file) => {\n        if (!file) return;\n        \n        // Validate file\n        const maxSize = 10 * 1024 * 1024; // 10MB\n        if (file.size > maxSize) {\n            addSystemMessage('File too large. Maximum size is 10MB.', 'error');\n            return;\n        }\n        \n        const allowedTypes = ['image/', 'video/', 'application/pdf', 'text/'];\n        if (!allowedTypes.some(type => file.type.startsWith(type))) {\n            addSystemMessage('File type not supported.', 'error');\n            return;\n        }\n        \n        try {\n            const formData = new FormData();\n            formData.append('file', file);\n            formData.append('conversation_id', conversationId);\n            \n            const token = localStorage.getItem('token');\n            const response = await fetch('/api/chatbot/upload', {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`\n                },\n                body: formData\n            });\n            \n            const result = await response.json();\n            \n            if (result.success) {\n                // Add file message\n                const fileMessage = {\n                    id: generateMessageId(),\n                    sender: 'user',\n                    content: `📎 Uploaded: ${file.name}`,\n                    timestamp: new Date().toISOString(),\n                    response_type: 'file',\n                    data: {\n                        file_name: file.name,\n                        file_type: file.type,\n                        file_url: result.file_url\n                    }\n                };\n                \n                setMessages(prev => [...prev, fileMessage]);\n                \n                // Notify via socket\n                if (socketRef.current) {\n                    socketRef.current.emit('file_uploaded', {\n                        file_data: fileMessage.data\n                    });\n                }\n            } else {\n                addSystemMessage('Failed to upload file', 'error');\n            }\n        } catch (error) {\n            console.error('File upload error:', error);\n            addSystemMessage('File upload failed', 'error');\n        }\n    }, [conversationId]);\n    \n    // Voice recording handlers\n    const handleVoiceStart = useCallback(() => {\n        setIsRecording(true);\n    }, []);\n    \n    const handleVoiceEnd = useCallback(async (audioBlob) => {\n        setIsRecording(false);\n        \n        if (!audioBlob) return;\n        \n        try {\n            // Convert speech to text (would use Web Speech API or external service)\n            // For now, just send as audio file\n            const audioFile = new File([audioBlob], 'voice_message.wav', { type: 'audio/wav' });\n            await handleFileUpload(audioFile);\n        } catch (error) {\n            console.error('Voice recording error:', error);\n            addSystemMessage('Voice message failed', 'error');\n        }\n    }, [handleFileUpload]);\n    \n    // Utility functions\n    const generateMessageId = () => `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const addSystemMessage = (content, type = 'info') => {\n        const systemMessage = {\n            id: generateMessageId(),\n            sender: 'system',\n            content,\n            timestamp: new Date().toISOString(),\n            response_type: 'system',\n            data: { type }\n        };\n        setMessages(prev => [...prev, systemMessage]);\n    };\n    \n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    };\n    \n    const toggleWidget = () => {\n        setIsOpen(!isOpen);\n        if (!isOpen) {\n            setUnreadCount(0);\n        }\n    };\n    \n    const minimizeWidget = () => {\n        setIsMinimized(!isMinimized);\n    };\n    \n    const closeWidget = () => {\n        setIsOpen(false);\n        setIsMinimized(false);\n    };\n    \n    const escalateToHuman = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await fetch('/api/chatbot/escalate', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                },\n                body: JSON.stringify({\n                    conversation_id: conversationId,\n                    reason: 'user_request',\n                    priority: 'medium'\n                })\n            });\n            \n            const result = await response.json();\n            \n            if (result.success) {\n                setEscalationNotice({\n                    message: result.message,\n                    estimated_wait_time: result.estimated_wait_time\n                });\n            } else {\n                addSystemMessage('Failed to escalate conversation', 'error');\n            }\n        } catch (error) {\n            console.error('Escalation error:', error);\n            addSystemMessage('Escalation failed', 'error');\n        }\n    };\n    \n    // Render widget\n    return (\n        <>\n            {/* Widget Toggle Button */}\n            {!isOpen && (\n                <button\n                    onClick={toggleWidget}\n                    className=\"fixed bottom-6 right-6 bg-blue-600 hover:bg-blue-700 text-white p-4 rounded-full shadow-lg transition-all duration-200 z-50 group\"\n                    aria-label=\"Open chat support\"\n                >\n                    <MessageCircle size={24} />\n                    {unreadCount > 0 && (\n                        <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center\">\n                            {unreadCount > 99 ? '99+' : unreadCount}\n                        </span>\n                    )}\n                    <span className=\"absolute bottom-full mb-2 right-0 bg-gray-800 text-white text-sm px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                        Need help? Chat with us!\n                    </span>\n                </button>\n            )}\n            \n            {/* Chat Widget */}\n            {isOpen && (\n                <div className={`fixed bottom-6 right-6 bg-white rounded-lg shadow-2xl border border-gray-200 z-50 transition-all duration-300 ${\n                    isMinimized ? 'h-16 w-80' : 'h-96 w-80 sm:w-96'\n                }`}>\n                    \n                    {/* Header */}\n                    <div className=\"bg-blue-600 text-white p-4 rounded-t-lg flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                            <div className={`w-3 h-3 rounded-full ${\n                                isConnected ? 'bg-green-400' : 'bg-red-400'\n                            }`} />\n                            <div>\n                                <h3 className=\"font-semibold text-sm\">EstateCore Support</h3>\n                                <p className=\"text-xs opacity-90\">\n                                    {isConnected ? 'Online' : 'Connecting...'}\n                                </p>\n                            </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                            <button\n                                onClick={minimizeWidget}\n                                className=\"text-white hover:bg-blue-700 p-1 rounded transition-colors\"\n                                aria-label={isMinimized ? 'Maximize chat' : 'Minimize chat'}\n                            >\n                                {isMinimized ? <Maximize2 size={16} /> : <Minimize2 size={16} />}\n                            </button>\n                            <button\n                                onClick={closeWidget}\n                                className=\"text-white hover:bg-blue-700 p-1 rounded transition-colors\"\n                                aria-label=\"Close chat\"\n                            >\n                                <X size={16} />\n                            </button>\n                        </div>\n                    </div>\n                    \n                    {/* Chat Content */}\n                    {!isMinimized && (\n                        <>\n                            {/* Connection Error */}\n                            {connectionError && (\n                                <div className=\"bg-red-50 border-b border-red-200 p-3\">\n                                    <div className=\"flex items-center space-x-2\">\n                                        <AlertTriangle size={16} className=\"text-red-500\" />\n                                        <span className=\"text-red-700 text-sm\">{connectionError}</span>\n                                    </div>\n                                </div>\n                            )}\n                            \n                            {/* Escalation Notice */}\n                            {escalationNotice && (\n                                <EscalationNotice \n                                    notice={escalationNotice}\n                                    onClose={() => setEscalationNotice(null)}\n                                />\n                            )}\n                            \n                            {/* Messages */}\n                            <div className=\"h-64 overflow-y-auto p-4 space-y-3 bg-gray-50\">\n                                {messages.map((message) => (\n                                    <MessageBubble\n                                        key={message.id}\n                                        message={message}\n                                    />\n                                ))}\n                                \n                                {/* Bot Typing Indicator */}\n                                {isBotTyping && (\n                                    <TypingIndicator />\n                                )}\n                                \n                                <div ref={messagesEndRef} />\n                            </div>\n                            \n                            {/* Quick Replies */}\n                            {quickReplies.length > 0 && (\n                                <div className=\"px-4 py-2 border-t border-gray-200\">\n                                    <div className=\"flex flex-wrap gap-2\">\n                                        {quickReplies.map((reply, index) => (\n                                            <QuickReplyButton\n                                                key={index}\n                                                text={reply}\n                                                onClick={() => handleQuickReply(reply)}\n                                            />\n                                        ))}\n                                    </div>\n                                </div>\n                            )}\n                            \n                            {/* Input Area */}\n                            <div className=\"p-4 border-t border-gray-200 bg-white rounded-b-lg\">\n                                <div className=\"flex items-end space-x-2\">\n                                    {/* File Upload */}\n                                    <button\n                                        onClick={() => fileInputRef.current?.click()}\n                                        className=\"text-gray-400 hover:text-gray-600 p-2 transition-colors\"\n                                        aria-label=\"Attach file\"\n                                    >\n                                        <Paperclip size={18} />\n                                    </button>\n                                    \n                                    {/* Text Input */}\n                                    <div className=\"flex-1\">\n                                        <textarea\n                                            ref={inputRef}\n                                            value={inputText}\n                                            onChange={handleInputChange}\n                                            onKeyPress={handleKeyPress}\n                                            placeholder=\"Type your message...\"\n                                            className=\"w-full p-2 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                                            rows={1}\n                                            maxLength={MAX_MESSAGE_LENGTH}\n                                        />\n                                        <div className=\"text-xs text-gray-400 mt-1\">\n                                            {inputText.length}/{MAX_MESSAGE_LENGTH}\n                                        </div>\n                                    </div>\n                                    \n                                    {/* Voice Recording */}\n                                    <VoiceRecorder\n                                        isRecording={isRecording}\n                                        onStart={handleVoiceStart}\n                                        onEnd={handleVoiceEnd}\n                                    />\n                                    \n                                    {/* Send Button */}\n                                    <button\n                                        onClick={() => sendMessage()}\n                                        disabled={!inputText.trim() || !isConnected}\n                                        className=\"bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 text-white p-2 rounded-lg transition-colors\"\n                                        aria-label=\"Send message\"\n                                    >\n                                        <Send size={18} />\n                                    </button>\n                                </div>\n                                \n                                {/* Action Buttons */}\n                                <div className=\"flex justify-between items-center mt-2 text-xs\">\n                                    <button\n                                        onClick={escalateToHuman}\n                                        className=\"text-blue-600 hover:text-blue-700 transition-colors\"\n                                    >\n                                        💬 Speak to a human\n                                    </button>\n                                    \n                                    <div className=\"flex items-center space-x-4\">\n                                        <a \n                                            href=\"tel:+15551234567\" \n                                            className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n                                            aria-label=\"Call us\"\n                                        >\n                                            <Phone size={14} />\n                                        </a>\n                                        <a \n                                            href=\"mailto:support@estatecore.com\"\n                                            className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n                                            aria-label=\"Email us\"\n                                        >\n                                            <Mail size={14} />\n                                        </a>\n                                    </div>\n                                </div>\n                            </div>\n                        </>\n                    )}\n                </div>\n            )}\n            \n            {/* Hidden File Input */}\n            <input\n                ref={fileInputRef}\n                type=\"file\"\n                onChange={(e) => handleFileUpload(e.target.files[0])}\n                className=\"hidden\"\n                accept=\"image/*,video/*,.pdf,.txt,.doc,.docx\"\n            />\n        </>\n    );\n};\n\nexport default ChatWidget;\n"
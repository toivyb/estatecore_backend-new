#!/usr/bin/env python3
"""
EstateCore Email Configuration Setup Script
This script helps you securely configure email settings for EstateCore
"""

import os
import sys
import getpass
from pathlib import Path

def create_env_file():
    """Create .env file with email configuration"""
    
    print("üîß EstateCore Email Configuration Setup")
    print("=" * 50)
    
    # Get current directory
    backend_dir = Path(__file__).parent / "estatecore_backend"
    env_file = backend_dir / ".env"
    
    # Check if .env already exists
    if env_file.exists():
        overwrite = input(f"\n.env file already exists at {env_file}\nOverwrite? (y/N): ")
        if overwrite.lower() != 'y':
            print("Setup cancelled.")
            return
    
    print("\nüìß Email Configuration")
    print("-" * 30)
    
    # Get email settings
    smtp_server = input("SMTP Server (default: smtp.gmail.com): ").strip() or "smtp.gmail.com"
    smtp_port = input("SMTP Port (default: 587): ").strip() or "587"
    
    print(f"\nüìÆ Email Account")
    print("-" * 20)
    smtp_username = input("Email Address: ").strip()
    
    if not smtp_username:
        print("‚ùå Email address is required!")
        return
    
    print(f"\nüîê For Gmail, use an App Password (not your regular password)")
    print("Generate one at: https://myaccount.google.com/apppasswords")
    smtp_password = getpass.getpass("App Password: ").strip()
    
    if not smtp_password:
        print("‚ùå Password is required!")
        return
    
    # Get sender information
    sender_name = input(f"Sender Name (default: EstateCore Platform): ").strip() or "EstateCore Platform"
    sender_email = input(f"Sender Email (default: {smtp_username}): ").strip() or smtp_username
    
    # Create .env content
    env_content = f"""# EstateCore Environment Configuration
# Generated by setup_email_config.py

# Database Configuration
DATABASE_URL=postgresql://username:password@localhost:5432/estatecore_db

# Flask Configuration
FLASK_ENV=development
SECRET_KEY=your-secret-key-change-this-in-production
DEBUG=True

# Email Configuration (SMTP)
SMTP_SERVER={smtp_server}
SMTP_PORT={smtp_port}
SMTP_USE_TLS=true
SMTP_USE_SSL=false
SMTP_USERNAME={smtp_username}
SMTP_PASSWORD={smtp_password}
SENDER_NAME={sender_name}
SENDER_EMAIL={sender_email}
REPLY_TO_EMAIL={sender_email}

# Email Rate Limiting
MAX_EMAILS_PER_HOUR=100
MAX_RECIPIENTS_PER_EMAIL=50

# Stripe Configuration (add your keys)
STRIPE_PUBLISHABLE_KEY=pk_test_your_key_here
STRIPE_SECRET_KEY=sk_test_your_key_here
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret

# API Gateway Configuration
API_GATEWAY_RATE_LIMIT=1000
API_GATEWAY_BURST_LIMIT=100

# Integration Settings (configure as needed)
YARDI_API_URL=https://api.yardi.com
QUICKBOOKS_CLIENT_ID=your_quickbooks_client_id
REALPAGE_API_KEY=your_realpage_api_key
APPFOLIO_CLIENT_SECRET=your_appfolio_secret

# Security
JWT_SECRET_KEY=your-jwt-secret-key-change-this
ENCRYPTION_KEY=your-32-byte-encryption-key-change-this

# File Storage
UPLOAD_FOLDER=/var/uploads
MAX_CONTENT_LENGTH=16777216

# Redis (for caching and sessions)
REDIS_URL=redis://localhost:6379/0

# Monitoring
SENTRY_DSN=your-sentry-dsn-url
"""

    try:
        # Ensure backend directory exists
        backend_dir.mkdir(exist_ok=True)
        
        # Write .env file
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        # Set restrictive permissions on .env file
        os.chmod(env_file, 0o600)
        
        print(f"\n‚úÖ Email configuration saved to: {env_file}")
        print(f"üîí File permissions set to read-only for owner")
        
        # Test email connection
        test_connection = input("\nTest email connection now? (Y/n): ").strip().lower()
        if test_connection != 'n':
            test_email_setup(env_file)
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")

def test_email_setup(env_file):
    """Test email configuration"""
    
    print("\nüß™ Testing Email Configuration...")
    
    try:
        # Load environment variables from .env file
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value
        
        # Import and test email service
        sys.path.append(str(Path(__file__).parent / "estatecore_backend"))
        
        from services.email_service import email_service
        
        # Test SMTP connection
        if email_service.test_connection():
            print("‚úÖ SMTP connection successful!")
            
            # Ask if they want to send a test email
            send_test = input("Send test email? (Y/n): ").strip().lower()
            if send_test != 'n':
                test_email = input("Test email address: ").strip()
                if test_email:
                    success = email_service.send_email(
                        to_emails=[test_email],
                        subject="EstateCore Email Test",
                        body_html="""
                        <h2>üéâ EstateCore Email Test</h2>
                        <p>Congratulations! Your email configuration is working correctly.</p>
                        <p>This test email confirms that EstateCore can send emails successfully.</p>
                        <p><strong>Configuration Details:</strong></p>
                        <ul>
                            <li>SMTP Server: {}</li>
                            <li>SMTP Port: {}</li>
                            <li>Sender: {}</li>
                        </ul>
                        <p>Your EstateCore platform is ready to send notifications, receipts, and other important emails to your tenants and property managers.</p>
                        """.format(
                            os.getenv('SMTP_SERVER'),
                            os.getenv('SMTP_PORT'), 
                            os.getenv('SENDER_EMAIL')
                        ),
                        body_text=f"""
                        EstateCore Email Test
                        
                        Congratulations! Your email configuration is working correctly.
                        
                        Configuration Details:
                        - SMTP Server: {os.getenv('SMTP_SERVER')}
                        - SMTP Port: {os.getenv('SMTP_PORT')}
                        - Sender: {os.getenv('SENDER_EMAIL')}
                        
                        Your EstateCore platform is ready to send emails!
                        """
                    )
                    
                    if success:
                        print("‚úÖ Test email sent successfully!")
                    else:
                        print("‚ùå Failed to send test email")
        else:
            print("‚ùå SMTP connection failed!")
            print("Please check your email credentials and try again.")
            
    except Exception as e:
        print(f"‚ùå Error testing email: {e}")
        print("You can test the email configuration later using the email service.")

def main():
    """Main setup function"""
    
    if len(sys.argv) > 1 and sys.argv[1] == '--help':
        print("""
EstateCore Email Configuration Setup

This script helps you configure email settings for EstateCore.

Usage:
    python setup_email_config.py

The script will:
1. Prompt for your email server settings
2. Create a secure .env file with your configuration  
3. Test the email connection
4. Optionally send a test email

For Gmail:
1. Enable 2-factor authentication on your Google account
2. Generate an App Password at: https://myaccount.google.com/apppasswords
3. Use the App Password (not your regular password) in this setup

Security:
- The .env file will be created with restrictive permissions (600)
- Never commit the .env file to version control
- Keep your email credentials secure
        """)
        return
    
    print("üöÄ Welcome to EstateCore Email Setup!")
    
    # Check if we're in the right directory
    if not Path("estatecore_backend").exists():
        print("‚ùå Error: This script must be run from the EstateCore project root directory")
        print("Expected directory structure:")
        print("  estatecore_project/")
        print("    ‚îú‚îÄ‚îÄ estatecore_backend/")
        print("    ‚îî‚îÄ‚îÄ setup_email_config.py")
        return
    
    create_env_file()
    
    print("\nüéâ Email setup complete!")
    print("\nNext steps:")
    print("1. Start your EstateCore backend server")
    print("2. Email notifications will be sent automatically for:")
    print("   ‚Ä¢ Tenant payment confirmations")
    print("   ‚Ä¢ Maintenance request notifications")
    print("   ‚Ä¢ Lease expiration alerts") 
    print("   ‚Ä¢ And more...")
    print("\nüìß Your property management platform is ready to communicate!")

if __name__ == "__main__":
    main()